# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "prod" branch
  push:
    branches: 
      - prod

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build_and_push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: create the required env variable files from the secrets
        run: |
          touch .env-flasky
          touch .env-mysql
          echo FLASK_APP=${{ secrets.FLASK_APP }} >> .env-flasky
          echo FLASK_CONFIG=${{ secrets.FLASK_CONFIG }} >> .env-flasky
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env-flasky
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env-flasky
          echo MYSQL_RANDOM_ROOT_PASSWORD=${{ secrets.MYSQL_RANDOM_ROOT_PASSWORD }} >> .env-mysql
          echo MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} >> .env-mysql
          echo MYSQL_USER=${{ secrets.MYSQL_USER }} >> .env-mysql
          echo MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} >> .env-mysql
          echo API_KEY=${{ secrets.API_KEY }} >> .env
          cat .env
          cat .env-flasky
          cat .env-mysql
      - name: build the docker image for the flasky service, keep the mysql service intact
        run: docker-compose build flasky
      - name: Log in to docker hub
        run: docker login -u aldosebastian -p ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Tag image
        run:
          # Usage is docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
          # With this setup, the image, which was untagged, is now given the "latest" tag
          docker tag aldosebastian/blogging aldosebastian/blogging:latest
      - name: Push image to DO Container Registry
        # We push the using the tag instead of the image name
        run: docker push aldosebastian/blogging:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    
    steps:
      - name: setup for ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/digitaloceanserver.key
          chmod 600 ~/.ssh/digitaloceanserver.key
          cat >>~/.ssh/config <<END
          Host digitaloceanserver
            HostName $SSH_HOST
            User root
            IdentityFile ~/.ssh/digitaloceanserver.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.SSHKEY_6422568141 }}
          SSH_HOST: 64.225.68.141
      - name: Stop the server
        run: >
            ssh digitaloceanserver " &&
            # Move to directory where the docker-compose.yml is
            cd /home/aldo/ &&
            # Login to dockerhub registry
            docker login -u aldosebastian -p ${{ secrets.DOCKERHUB_PASSWORD }} &&
            # Stop and remove any flasky service container 
            docker stop blogging_service && docker rm blogging_service &&
            # Delete the image that ran the deleted container (i.e. the one with the tag latest), since now this image is outdated 
            # (this is to save space, if you want you can skip this. If skipped, after docker pull the old image will have tag None)
            docker rmi aldosebastian/blogging:latest &&
            # Pull the latest image
            docker pull aldosebastian/blogging &&
            # Run the flasky service container using the docker-compose.yml in the server.
            # The below actually will start both the flasky and its db containers, but if a db
            # container already is running, it will say it is still up to date
            docker-compose up -d
            "