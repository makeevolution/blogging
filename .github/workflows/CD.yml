name: CD

jobs:
  build_container_and_push_to_docker_hub_registry:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: create the required env variable files from the secrets
        run: |
          touch .env-flasky
          touch .env-mysql
          echo FLASK_APP=${{ secrets.FLASK_APP }} >> .env-flasky
          echo FLASK_CONFIG=${{ secrets.FLASK_CONFIG }} >> .env-flasky
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env-flasky
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env-flasky
      - name: build the docker image for the flasky service, keep the mysql service intact
        run: docker-compose build flasky
      - name: Log in to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Tag image
        run:
          # Usage of tag command is: docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
          # With this setup, the image, which was built untagged, is now given the "latest" tag
          docker tag aldosebastian/blogging aldosebastian/blogging:latest
      - name: Push image to dockerhub
        # We have push the using the tag instead of the image name; it's just the way things are
        run: docker push aldosebastian/blogging:latest
  # After pushing, we go to the server, download the image and run it there
  deploy_service_on_server:
    runs-on: ubuntu-latest
    needs: build_container_and_push_to_docker_hub_registry
    steps:
      - name: SSH to the server
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/digitaloceanserver.key
          chmod 600 ~/.ssh/digitaloceanserver.key
          cat >>~/.ssh/config <<END
          Host digitaloceanserver
            HostName $SSH_HOST
            User root
            IdentityFile ~/.ssh/digitaloceanserver.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.SSHKEY_6422568141 }}
          SSH_HOST: ${{ secrets.SSHHOST }}
      - name: Run the Docker container for the blogging service
        # Steps Explanation:
        # Move to directory where the docker-compose.yml and env_var file is
        # Login to dockerhub registry
        # Stop and remove any existing blogging service container, check if service is running using --filter. The || works like this example:
          # ls | grep . && echo 'files found' || echo 'files not found'
        # Delete the image that ran the deleted container (i.e. the one with the tag latest), since now this image is outdated. Also check if it exists just for completeness.
        # (the above is done to save space, if you want you can skip this. If skipped, after docker pull the old image will have tag None, and can fill up space over time)
        # Pull the latest image
        # Run the flasky service container using the docker-compose.yml in the server.
        # The yml file will actually start both the flasky and its db containers, but if a db
        # container already is running, the command will say it is up to date and won't touch it.
        run: >
            ssh digitaloceanserver "
            cd /home/aldo/ &&
            docker login -u aldosebastian -p ${{ secrets.DOCKERHUB_PASSWORD }} &&
            docker ps -q --filter "name=blogging_service" | grep -q . && echo Stopping blogging_service container... && docker stop blogging_service && echo Removing blogging_service container... && docker rm blogging_service || echo -e 'INFO: No existing blogging_service container running\nCreating new service...' &&
            docker images aldosebastian/blogging:latest | awk "NR==2" | grep -q . && echo Deleting blogging_service image && docker rmi aldosebastian/blogging:latest || echo -e 'No local image for blogging service found, pulling new from dockerhub\n' &&
            docker pull aldosebastian/blogging &&
            docker-compose up -d
            "
